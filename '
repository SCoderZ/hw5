#ifndef RECCHECK
#include <set>
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <map>
#include <algorithm>
// add or remove necessary headers as you please

#endif

#include "schedwork.h"

using namespace std;

// a constant that can be used to indicate an INVALID 
// worker ID if that is useful to your implementation.
// Feel free to not use or delete.
static const Worker_T INVALID_ID = (unsigned int)-1;


// Add prototypes for any helper functions here
bool trace(
  AvailabilityMatrix avail,
  size_t n, // day
  size_t d, // need position
  const size_t dailyNeed,
  const size_t maxShifts,
  DailySchedule &sched,
  vector<int> worker_work_days
) {
  int num_workers = avail[0].size();

  AvailabilityMatrix avail_cpy = avail;
  size_t n_cpy = n;
  size_t d_cpy = d;
  DailySchedule sched_cpy = sched;
  vector<int> worker_work_days_cpy = worker_work_days;

  for (int i = 0; i < num_workers; i++) {
    avail = avail_cpy;
    n = n_cpy;
    d = d_cpy;
    sched = sched_cpy;
    worker_work_days = worker_work_days_cpy;

    if (avail[n][i] && worker_work_days[i] < maxShifts) {
      sched[n][d] = i;
      worker_work_days[i]++;
      avail[n][i] = false;
      d++;
      if (d < dailyNeed) {
        return trace(avail, n, d, dailyNeed, maxShifts, sched, worker_work_days);
      } else if (d == dailyNeed && n + 1 != avail.size()) {
        return trace(avail, n+1, 0, dailyNeed, maxShifts, sched, worker_work_days);
      } else if (d == dailyNeed && n + 1 == avail.size()) { 
        return true;
      }
    }   
  }


  return false;
}

// Add your implementation of schedule() and other helper functions here

bool schedule(
    const AvailabilityMatrix& avail,
    const size_t dailyNeed,
    const size_t maxShifts,
    DailySchedule& sched
)
{
    if(avail.size() == 0U){
        return false;
    }
    sched.clear();
    // Add your code below

  int num_workers = avail[0].size();
  vector<int> worker_work_days;
  for (int i = 0; i < num_workers; i++) {
    worker_work_days.push_back(0);
  }

  for (int i = 0; i < avail.size(); i++) {
    vector<Worker_T> workers;
    for (int j = 0; j < dailyNeed; j++) {
      workers.push_back(INVALID_ID);
    }
    sched.push_back(workers);
  }

  return trace(avail, 0, 0, dailyNeed, maxShifts, sched, worker_work_days);
}

